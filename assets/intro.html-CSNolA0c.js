import{_ as s,c as n,o as a,e}from"./app-3zXcJHqD.js";const t={},o=e(`<h2 id="tsconfig-json" tabindex="-1"><a class="header-anchor" href="#tsconfig-json"><span>tsconfig.json</span></a></h2><p>Как мы уже знаем, для работы с TypeScript в npm-реестре существует специальный пакет — <a href="https://www.npmjs.com/package/typescript" target="_blank" rel="noopener noreferrer">typescript</a>. Для его установки, в качестве зависимости для разработки, необходимо выполнить команду:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line"><span class="token function">npm</span> <span class="token function">install</span> typescript --save-dev</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>После этого с помощью CLI мы можем компилировать TS-файлы:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">npx tsc ./index.ts</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Но на какие правила в таком случае опирается компилятор? Например, если мы скомпилируем следующий TS-код:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token operator">:</span> number<span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> number<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>То он станет следующим JS-кодом:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>То есть мы видим, что код преобразовался в более старый стандарт ECMAScript (а именно ES3). Это поведение компилятора по умолчанию, но мы можем им управлять. Для этого нужно передать специальный параметр:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">npx tsc ./index.ts <span class="token parameter variable">--target</span> es6</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>И теперь код преобразуется в стандарт ES6:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Как мы видим, этим можно управлять с помощью специальных параметров. На самом деле таких параметров очень много (<a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" target="_blank" rel="noopener noreferrer">ссылка на документацию</a>), и указывать все это через консоль довольно неудобно. Если нам необходимо множество параметров= компилятора TypeScript, то намного удобнее записать их в специальный файл — <code>tsconfig.json.</code></p><h3 id="фаил-конфигурации" tabindex="-1"><a class="header-anchor" href="#фаил-конфигурации"><span><strong>Файл конфигурации</strong></span></a></h3><p>Файл <code>tsconfig.json.</code> — это файл конфигурации, который позволяет управлять поведением компилятора TypeScript. Он помещается в корень проекта, и компилятор автоматически считывает его при компиляции кода. Файл <code>tsconfig.json.</code> написан в формате JSON и содержит несколько свойств, которые настраивают компилятор TypeScript.</p><p>Давайте создадим данный файл. Для этого выполняем следующую команду:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">npx tsc <span class="token parameter variable">--init</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Эта команда создаст <code>tsconfig.json.</code> со стандартными параметрами. Их можно изменять в зависимости от конкретного проекта.</p><h3 id="параметры" tabindex="-1"><a class="header-anchor" href="#параметры"><span><strong>Параметры</strong></span></a></h3><p>Давайте посмотрим на следующий пример файла с основными параметрами и разберем их:</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js" data-title="js"><pre class="language-javascript"><code><span class="line"><span class="token punctuation">{</span></span>
<span class="line">	<span class="token string-property property">&quot;compilerOptions&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token string-property property">&quot;target&quot;</span><span class="token operator">:</span> <span class="token string">&quot;es2016&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token string-property property">&quot;module&quot;</span><span class="token operator">:</span> <span class="token string">&quot;commonjs&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token string-property property">&quot;allowJs&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token string-property property">&quot;sourceMap&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token string-property property">&quot;outDir&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dist&quot;</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token string-property property">&quot;noEmitOnError&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token string-property property">&quot;esModuleInterop&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token string-property property">&quot;forceConsistentCasingInFileNames&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">		<span class="token string-property property">&quot;strict&quot;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token string-property property">&quot;include&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;src/**/*&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span></span>
<span class="line">	<span class="token string-property property">&quot;exclude&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;**/*.spec.ts&quot;</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>&quot;compilerOptions&quot;</code> — верхнеуровневое свойство, содержащее параметры для компилятора. Это основная часть конфигурации, которая определяет, как должен работать язык. Рекомендуем ознакомиться с несколькими полезными настройками:</p><table><thead><tr><th>Ключ</th><th>Описание</th></tr></thead><tbody><tr><td><code>target</code></td><td>указывает версию ECMAScript, в которую будет скомпилирован TypeScript-код. Например, <code>&quot;es3&quot;</code>, <code>&quot;es5&quot;</code>, <code>&quot;es6&quot;</code>, <code>&quot;es2016&quot;</code>, <code>&quot;esnext&quot;</code> и другие.</td></tr><tr><td><code>module</code></td><td>указывает, какую систему модулей использовать. Можно указать <code>&quot;commonjs&quot;</code>, <code>&quot;amd&quot;</code>, <code>&quot;system&quot;</code>, <code>&quot;es2015&quot;</code>, <code>&quot;es2020&quot;</code>, <code>&quot;esnext&quot;</code> и другие.</td></tr><tr><td><code>allowJs</code></td><td>позволяет использовать JavaScript-файлы в TypeScript-проекте. Эта опция может быть полезна, если у нас уже есть проект на JavaScript, и мы хотим его постепенно перевести на TypeScript.</td></tr><tr><td><code>sourceMap</code></td><td>включает создание <a href="https://firefox-source-docs.mozilla.org/devtools-user/debugger/how_to/use_a_source_map/index.html#use-a-source-map" target="_blank" rel="noopener noreferrer">source maps</a> для удобства отладки.</td></tr><tr><td><code>outDir</code></td><td>задает каталог, в котором должны сохраняться скомпилированные JavaScript-файлы. Если не указывать, то по умолчанию JS-файлы будут сохраняться там же, где их TS-исходники (например, для файла <code>/src/foo/bar.ts</code> создастся <code>/src/foo/bar.js</code>).</td></tr><tr><td><code>noEmitOnError</code></td><td>определяет, будет ли TypeScript компилироваться в JavaScript, если в процессе компиляции возникнут ошибки.</td></tr><tr><td><code>esModuleInterop</code></td><td>упрощает работу с импортами CommonJS-модулей.</td></tr><tr><td><code>forceConsistentCasingInFileNames</code></td><td>гарантирует, что при импорте будет указан правильный регистр имени файла. Это может помочь предотвратить ошибки при работе с разными операционными системами (чувствительных и нечувствительных к регистру).</td></tr><tr><td><code>strict</code></td><td>включить все параметры строгой проверки типов (такие как <code>strictBindCallApply</code>, <code>strictFunctionTypes</code>, <code>strictNullChecks</code> и другие). Рекомендуется включить, так как это помогает избежать ошибок в коде, улучшить качество и надежность приложений.</td></tr></tbody></table><p>Далее идет <code>«include»</code>. Это верхнеуровневое свойство, которое указывает, что должно быть включено в программу (будет скомпилировано). Оно поддерживает шаблоны поиска, т. е. при указании <code>[«src/**/*»]</code> будут искаться TS-файлы внутри папки <code>src</code>, а также во всех её дочерних папках.</p><p>Затем идет верхнеуровневое свойство <code>&quot;exclude&quot;</code>. Здесь ровно наоборот — определяем, что из указанного в <code>&quot;include&quot;</code> компилятору нужно проигнорировать. Здесь также поддерживаются шаблоны поиска, т. е. при указании <code>[&quot;**/*.spec.ts&quot;]</code> все файлы, которые оканчиваются на <code>.spec.ts</code> компилироваться не будут.</p><p>Полный список параметров, а также их подробные описания можно узнать <a href="https://www.typescriptlang.org/tsconfig" target="_blank" rel="noopener noreferrer">в документации</a>.</p><h3 id="запуск-с-использованием-фаила-конфигурации" tabindex="-1"><a class="header-anchor" href="#запуск-с-использованием-фаила-конфигурации"><span><strong>Запуск с использованием файла конфигурации</strong></span></a></h3><p>После того, как мы настроили файл <code>tsconfig.json</code>, нам нужно запустить компиляцию с учетом всех переданных параметров. Для этого выполняем команду:</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh" data-title="sh"><pre class="language-bash"><code><span class="line">npx tsc</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Эта команда по умолчанию ищет файл <code>tsconfig.json</code> в текущем каталоге и использует его для настройки компилятора.</p><h3 id="заключение" tabindex="-1"><a class="header-anchor" href="#заключение"><span><strong>Заключение</strong></span></a></h3><p>Файл <code>tsconfig.json</code> — важная часть любого TypeScript-проекта. Он позволяет настраивать компилятор и гарантирует, что все разработчики проекта используют одну и ту же конфигурацию. Понимая суть конфигурационного файла и его основных параметров, ты сможешь настраивать поведение компилятора для своего проекта.</p>`,33),p=[o];function c(r,l){return a(),n("div",null,p)}const d=s(t,[["render",c],["__file","intro.html.vue"]]),u=JSON.parse('{"path":"/pages/typescript/intro.html","title":"","lang":"ru-RU","frontmatter":{},"headers":[{"level":2,"title":"tsconfig.json","slug":"tsconfig-json","link":"#tsconfig-json","children":[{"level":3,"title":"Файл конфигурации","slug":"фаил-конфигурации","link":"#фаил-конфигурации","children":[]},{"level":3,"title":"Параметры","slug":"параметры","link":"#параметры","children":[]},{"level":3,"title":"Запуск с использованием файла конфигурации","slug":"запуск-с-использованием-фаила-конфигурации","link":"#запуск-с-использованием-фаила-конфигурации","children":[]},{"level":3,"title":"Заключение","slug":"заключение","link":"#заключение","children":[]}]}],"git":{"updatedTime":null,"contributors":[]},"filePathRelative":"pages/typescript/intro.md"}');export{d as comp,u as data};
