import{_ as e,c as t,o as n,e as r}from"./app-DDq6znWS.js";const o={},l=r(`<h1 id="работа-с-типами" tabindex="-1"><a class="header-anchor" href="#работа-с-типами"><span>Работа с типами</span></a></h1><p>/**</p><ul><li><ol><li>Объединение (Union Type) */ function compute(p1: number | string, p2:number | string) { if (typeof p1 === &#39;number&#39; &amp;&amp; typeof p2 === &#39;number&#39;) { return p1 + p2 } return p1.toString() + &#39; &#39; + p2.toString() }</li></ol></li></ul><p>console.log(compute(1, 2)); console.log(compute(&#39;hello&#39;, &#39;world&#39;));</p><p>function logError(error: string | string[]): string | void { if (Array.isArray(error)) { return error.reduce((prev, next) =&gt; prev += &#39; &#39; + next, &#39;&#39;); } else { console.log(error);</p><pre><code>}
</code></pre><p>}</p><p>/**</p><ul><li><ol start="2"><li>Литералы (Literal Type) */ type OutputType = &#39;text&#39; | &#39;json&#39;| &#39;xml&#39;;</li></ol></li></ul><p>// const str = &#39;typescript&#39;; // Литеральный тип</p><p>function convert(data: object, type: OutputType) { if (type === &#39;text&#39;) { return JSON.stringify(data); } else if (type === &#39;json&#39;) { return {...data}; } }</p><p>console.log(convert({a: 1}, &#39;text&#39;))</p><p>/**</p><ul><li><ol start="3"><li>Интерфейсы (Interface) */ // Так можно, но на этот случай есть interface // type User = { // name: string; // age: number; // hobbies: string[] // }</li></ol></li></ul><p>interface User { name: string age: number hobbies?: string[] // опциальный оператор, который делает поле необязательным }</p><p>interface Address { city: string street: string }</p><p>interface FullUser extends User, Address { date: Date }</p><p>const person: FullUser = { name : &#39;John&#39;, age: 30, hobbies: [&#39;Sports&#39;, &#39;Cooking&#39;], city: &#39;New York&#39;, street: &#39;123 Main St&#39;, date: new Date() }</p><p>interface UserMap { [key: number]: FullUser date?: Date }</p><p>const userMapOne: UserMap = { date: new Date(), 1: person, 2: person, 3: person }</p><p>const userMapTwo = { date: new Date(), 1: person, 2: person, 3: person } as UserMap</p><p>/**</p><ul><li><ol start="4"><li>unknown</li></ol></li><li>unknown - это тип, который может быть любого типа данных во время выполнения программы.</li><li>unknown - означает, что мы пока тчо не знаем какого типа будет переменная, но позднее мы узнаем его.</li><li>unknown - подразновидность типа any, но более строгий. */ let a: unknown = 42;</li></ul><p>let b = a === 10 // == === || &amp;&amp; ? !</p><p>// let c = a + 10 // error</p><p>if(typeof a === &#39;number&#39;) { let c = a + 10 }</p><p>/**</p><ul><li><ol start="5"><li>never</li></ol></li><li>never - это тип данных, которым нельзя присвоить значение. */ function throwError(message: string): never { throw new Error(message) }</li></ul><p>function loop(): never { while (true) {} }</p><p>function rec(): never { return rec() }</p><p>/**</p><ul><li><ol start="6"><li>Защитник типа (Type Guard) */ function isBoolean(val: string | boolean): val is boolean { return typeof val === &#39;boolean&#39; }</li></ol></li></ul><p>function isString(val: string | boolean): val is string { return typeof val === &#39;string&#39; }</p><p>// С защитником function logFlag(flag: string | boolean) { if(isBoolean(flag)) { console.log(&#39;this is boolean&#39;); } else if(isString(flag)) { console.log(&#39;this is string&#39;); } }</p><p>// Без защитника // function logFlag(flag: string | boolean) { // if(typeof flag === &#39;boolean&#39;) { // console.log(&#39;this is boolean&#39;); // } else if(typeof flag === &#39;string&#39;) { // console.log(&#39;this is string&#39;); // } // }</p><p>logFlag(true) logFlag(&#39;hello&#39;)</p>`,36),i=[l];function s(p,a){return n(),t("div",null,i)}const c=e(o,[["render",s],["__file","use_types.html.vue"]]),g=JSON.parse('{"path":"/pages/typescript/use_types.html","title":"Работа с типами","lang":"ru-RU","frontmatter":{},"headers":[],"git":{"updatedTime":1739359015000,"contributors":[{"name":"Mulc1ber","email":"dmo@mail.ru","commits":1}]},"filePathRelative":"pages/typescript/use_types.md"}');export{c as comp,g as data};
