import{_ as e,c as t,o as n,e as o}from"./app-DDq6znWS.js";const r={},s=o('<h1 id="базовые-типы" tabindex="-1"><a class="header-anchor" href="#базовые-типы"><span>Базовые типы</span></a></h1><p>// Работа с числами function sum(a: number, b: number): number { return a + b; }</p><p>const n1: number = 40; const n2: number = 2;</p><p>let a = 12; let b = Infinity; let c = NaN; let d = 0x1; let e = 0.1; let f: 24 = 24;</p><p>console.log(sum(n1, n2));</p><p>// Работа со строками const string = &quot;Hello TypeScript&quot;;</p><p>function transform(str: string, uppercase: boolean): string { if (uppercase) { return str.toUpperCase(); } return str.toLowerCase(); }</p><p>let isUppercase = true;</p><p>console.log(transform(string, isUppercase)); console.log(transform(string, false));</p><p>const arrowTransform = (str: string, uppercase: boolean): string =&gt; { if (uppercase) { return str.toUpperCase(); } return str.toLowerCase(); }</p><p>// Работа с объектами const person: {name: string, age: number, surname: string, address: {city: string, street: string}} = { name: &quot;John&quot;, age: 30, surname: &quot;Doe&quot;, address: { city: &quot;New York&quot;, street: &quot;5th Avenue&quot; } }</p><p>function fullname(obj: {name: string, surname: string}): string { return obj.name + &quot; &quot; + obj.surname; } console.log(fullname(person));</p><p>// Работа с массивами const names: string[] = [&quot;John&quot;, &quot;Alice&quot;, &quot;Bob&quot;];</p><p>names.push(&quot;Eve&quot;); console.log(names);</p><p>for (let name of names) { console.log(name.toUpperCase()); }</p><p>const result = names.filter((n) =&gt; n !== &#39;Bob&#39;).map((n) =&gt; n.length).reduce((acc, cur) =&gt; (acc += cur), 0);</p><p>console.log(result);</p><p>// Работа с Кортежами (Tuple) // const [count, setCount] = React.useState(100); // Это и есть кортеж const tuple: readonly[number, string] = [100, &#39;Hello&#39;];</p><p>// tuple[0] = &#39;Hello&#39;; // Error // const tmp = tuple[2] // Error // tuple.push(&#39;false&#39;); // Error из-за readonly</p><p>const tuple2: [boolean, string, ...number[]] = [true, &#39;Hello&#39;, 1, 2, 3, 4, 5];</p><p>// Работа с перечислениями (Enums) const ROLE = { ADMIN: &#39;admin&#39;, USER: &#39;user&#39; }</p><p>enum Role { admin, user, }</p><p>const person1 = { role: Role.admin, }</p><p>const person2 = { role: Role.user, }</p><p>function check(person: {role: Role}) { if (person.role === Role.admin) { console.log(&#39;User is Admin&#39;); } else { console.log(&#39;User is User&#39;); } }</p><p>const temp = { role: &#39;star wars&#39; }</p><p>check(person1); check(person2); // check(temp); // error</p><p>// Работа с Symbol и BigInt let aa: symbol = Symbol(&#39;key&#39;) let bb: symbol = Symbol(&#39;key2&#39;)</p><p>console.log(aa === bb);</p><p>const big1: bigint = 123n const big2: bigint = BigInt(456)</p><p>// Работа с void и undefined</p><p>// void используется для функций, которые ничего не возвращают function log(message: string): void { console.log(message); }</p><p>// undefined используется для переменных, которые не инициализированы let tmp: undefined</p><p>// Работа с функциями function logg(data: any): void { console.log(data); }</p><p>function summ(a: number, b: number, callback: (d: any) =&gt; void): number { const result = a + b; callback(result); return result; }</p><p>// let func: Function let func: (n1: number, n2: number, cb: (d: any) =&gt; void) =&gt; number</p><p>func = summ // func = logg // error</p><p>func(1, 2, logg);</p>',38),p=[s];function a(l,u){return n(),t("div",null,p)}const i=e(r,[["render",a],["__file","type_base.html.vue"]]),m=JSON.parse('{"path":"/pages/typescript/type_base.html","title":"Базовые типы","lang":"ru-RU","frontmatter":{},"headers":[],"git":{"updatedTime":1739359015000,"contributors":[{"name":"Mulc1ber","email":"dmo@mail.ru","commits":1}]},"filePathRelative":"pages/typescript/type_base.md"}');export{i as comp,m as data};
